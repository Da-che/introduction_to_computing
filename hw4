# Assignment #4: T-primes + 贪心
Updated 0337 GMT+8 Oct 15, 2024
2024 fall, Complied by 陈宣之 生命科学学院
**说明：**
1）请把每个题目解题思路（可选），源码 Python, 或者 C++（已经在 Codeforces/Openjudge 上 AC），截
图（包含 Accepted ），填写到下面作业模版中（推荐使用 typora https://typoraio.cn ，或者用
word）。AC 或者没有 AC，都请标上每个题目大致花费时间。
3）课程网站是 Canvas 平台, https://pku.instructure.com, 学校通知 9 月 19 日导入选课名单后启用。
**作业写好后，保留在自己手中，待 9 月 20 日提交。**
提交时候先提交 pdf 文件，再把 md 或者 doc “ ”文件上传到右侧 作业评论 。Canvas 需要有同学清晰头像、提交
文件有 pdf、"作业评论"区有上传的 md 或者 doc 附件。
4）如果不能在截止前提交作业，请写明原因。
## 1. 题目
### 34B. Sale
greedy, sorting, 900, https://codeforces.com/problemset/problem/34/B
思路：
代码
```
TV=input().split()
price=input().split()
earn=0
for j in range(int(TV[0])-1):
    for i in range(0,int(TV[0])-j-1):
        if int(price[i])>int(price[i+1]):
            price[i],price[i+1]=price[i+1],price[i]
for i in range(int(TV[1])):
    if int(price[i])>=0:
        break
    else:
        earn+=int(price[i])
print(-earn)
```
代码运行截图 

### 160A. Twins
greedy, sortings, 900, https://codeforces.com/problemset/problem/160/A
思路：
代码
```
n=int(input())
coin=input().split()
sup=0
count=0
my=0
for j in range(n-2):
    for i in range(n-j-1):
        if int(coin[i])<int(coin[i+1]):
            coin[i],coin[i+1]=coin[i+1],coin[i]
for i in range(n):
    sup+=int(coin[i])
for i in range(n):
    if my<=sup/2:
        count+=1
        my+=int(coin[i])
print(count)
```
代码运行截图 
====
### 1879B. Chips on the Board
constructive algorithms, greedy, 900,
https://codeforces.com/problemset/problem/1879/B
思路：
代码
```
times=int(input())
for m in range(times):
    n=int(input())
    a=input().split()
    b=input().split()
    print(min(min(int(a[i]) for i in range(n))*n+sum(int(b[i]) for i in range(n)),  \
    min(int(b[i]) for i in range(n))*n+sum(int(a[i]) for i in range(n))))
```
代码运行截图 
### 158B. Taxi
*special problem, greedy, implementation, 1100,
https://codeforces.com/problemset/problem/158/B
思路：
代码
```
n=int(input())
groups=list(map(int,input().split()))
groups.sort()
count=0
taxis=0
front=0
rear=n-1
while front<=rear:
    if groups[rear]==4:
        taxis+=1
        rear-=1
    elif groups[rear]==3:
        if groups[front]==1:
            rear-=1
            front+=1
            taxis+=1
        else:
            taxis+=1
            rear-=1
    elif groups[rear]==2:
        if groups[front]==2:
            taxis+=((rear-front+1)+1)//2
            break
        else:
            if groups[front]==groups[front+1]==1:
                rear-=1
                front+=2
                taxis+=1
            else:
                taxis+=1
                rear-=1
                front+=1
    else:
        taxis+=((rear-front+1)+3)//4
        break
print(taxis)
```
代码运行截图
### *230B. T-primes（选做）
binary search, implementation, math, number theory, 1300,
http://codeforces.com/problemset/problem/230/B
思路：
代码
```
import math
prime_number=[False,False]+[True]*1000000
for i in range(2,1000001):
    if prime_number[i]:
        control=2*i
        while control<=1000000:
            prime_number[control]=False
            control+=i
 
n=int(input())
numbers=input().split()
for i in range(n):
    if math.sqrt(int(numbers[i]))%1==0 and \
            prime_number[round(math.sqrt(int(numbers[i])))]:
        print("YES")
    else:
        print("NO")
```
代码运行截图
 
### *12559: 最大最小整数 （选做）
greedy, strings, sortings, http://cs101.openjudge.cn/practice/12559
思路：
代码
```
def compare(a,b):
    the_sum1=str(a)+str(b)
    the_sum2=str(b)+str(a)
    if int(the_sum1)>=int(the_sum2):
        return 1
    else:
        return 0


n=int(input())
the_list=list(input().split())
output=[the_list[0]]
output_reverse=[the_list[-1]]for i in range(1,n):
    for j in range(len(output)):
        if compare(the_list[i],output[j])==1:
            output.insert(j,the_list[i])
            break
    else:
        output.append(the_list[i])for i in range(n-2,-1,-1):
    for j in range(len(output_reverse)):
        if compare(the_list[i],output_reverse[j])==1:
            output_reverse.insert(j,the_list[i])
            break
    else:
        output_reverse.append(the_list[i])
output_reverse.reverse()print("".join(output)+" "+"".join(output_reverse))

```
代码运行截图 
## 2. 学习总结和收获
如果作业题目简单，有否额外练习题目，比如：OJ“计概 2024fall ”每日选做 、CF、LeetCode、洛谷
等网站题目。
能明显感觉到多多练习后自己的进步，题目基本都有思路，出现问题也能比较熟练地用打断点的方法找到问题所在了。但是一些难题的纠错还是要花比较长的时间，而且当思路有些问题的时候也习惯在原来代码上加很多判断，写得越来越长，浪费很多时间，而且也不一定能AC，例如最大最小整数原来写了七十行，后来全删掉后只用了二三十行就AC了
