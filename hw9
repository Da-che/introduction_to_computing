# Assignment #9: dfs, bfs, & dp
Updated 2107 GMT+8 Nov 19, 2024
2024 fall, Complied by 陈宣之 生命科学学院
**说明：**
1）请把每个题目解题思路（可选），源码 Python, 或者 C++（已经在 Codeforces/Openjudge 上 AC），截
图（包含 Accepted ），填写到下面作业模版中（推荐使用 typora https://typoraio.cn ，或者用
word）。AC 或者没有 AC，都请标上每个题目大致花费时间。
2）提交时候先提交 pdf 文件，再把 md 或者 doc “ ”文件上传到右侧 作业评论 。Canvas 需要有同学清晰头像、提
交文件有 pdf、"作业评论"区有上传的 md 或者 doc 附件。
3）如果不能在截止前提交作业，请写明原因。
## 1. 题目
### 18160: 最大连通域面积
dfs similar, http://cs101.openjudge.cn/practice/18160
思路：
代码：
```
times=int(input())for i in range(times):
    n,m=map(int,input().split())
    board=[]
    for j in range(n):
        board.append(list(input()))


    max_cnt=0
    directions=[(0,1),(1,0),(0,-1),(-1,0),(1,1),(-1,-1),(1,-1),(-1,1)]
    def dfs(x,y):
        global max_cnt
        cnt=1
        stack=[(x,y)]
        board[x][y]='.'
        while stack:
            x,y=stack.pop()
            for dx,dy in directions:
                nx,ny=x+dx,y+dy
                if 0<=nx<n and 0<=ny<m and board[nx][ny]=='W':
                    stack.append((nx,ny))
                    board[nx][ny]='.'
                    cnt+=1
        max_cnt=max(max_cnt,cnt)

    for a in range(n):
        for b in range(m):
            if board[a][b]=='W':
                dfs(a,b)
    print(max_cnt)

```
代码运行截图 
### 19930: 寻宝
bfs, http://cs101.openjudge.cn/practice/19930
思路：
代码：
```
from collections import deque

m,n=map(int,input().split())
the_map=[list(map(int,input().split())) for i in range(m)]

directions=[(0,1),(0,-1),(1,0),(-1,0)]def bfs(x,y):
    q=deque()
    inq=set()
    q.append((x,y,0))
    inq.add((x,y))
    while q:
        x,y,steps=q.popleft()
        if the_map[x][y]==1:
            return steps
        for dx,dy in directions:
            nx,ny=x+dx,y+dy
            if 0<=nx<m and 0<=ny<n and the_map[nx][ny]!=2 and (nx,ny) not in inq:
                inq.add((nx,ny))
                q.append((nx,ny,steps+1))
    return "NO"
print(bfs(0,0))

```
代码运行截图 
### 04123: 马走日
dfs, http://cs101.openjudge.cn/practice/04123
思路：
代码：
```
times=int(input())
direction=[(1,2),(2,1),(1,-2),(2,-1),(-1,-2),(-2,-1),(-1,2),(-2,1)]
cnt=0
def bfs(x,y,steps):
    if steps==n*m:
        global cnt
        cnt+=1
        return
    for dx,dy in direction:
        nx=x+dx
        ny=y+dy
        if 0<=nx<n and 0<=ny<m and graph[nx][ny]==0:
            graph[nx][ny]=1
            bfs(nx,ny,steps+1)
            graph[nx][ny]=0

for _ in range(times):
    n,m,i,j=map(int,input().split())
    graph=[[0]*m for k in range(n)]
    cnt=0
    graph[i][j]=1
    bfs(i,j,1)
    print(cnt)

```
代码运行截图
### sy316: 矩阵最大权值路径
dfs, https://sunnywhy.com/sfbj/8/1/316
思路：
代码：
```
n,m=map(int,input().split())
matrix=[list(map(int,input().split())) for i in range(n)]
directions=[(1,0),(-1,0),(0,1),(0,-1)]

max_val=float('-inf')
max_path=[]
def dfs(x,y,val,path):
    global max_val,max_path
    if x==n-1 and y==m-1:
        if val>max_val:
            max_val=val
            max_path=path.copy()
        return
    for dx,dy in directions:
        nx,ny=x+dx,y+dy
        if 0<=nx<n and 0<=ny<m and (nx,ny) not in path:
            path.append((nx,ny))
            dfs(nx,ny,val+matrix[nx][ny],path)
            path.pop()

dfs(0,0,matrix[0][0],[(0,0)])
for x,y in max_path:
    print(x+1,y+1)

```
代码运行截图 
### LeetCode62.不同路径
dp, https://leetcode.cn/problems/unique-paths/
思路：
代码：
```
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        dp=[[1]*n for _ in range(m)]
        for i in range(1,m):
            for j in range(1,n):
                dp[i][j]=dp[i-1][j]+dp[i][j-1]
        return dp[m-1][n-1]

```
代码运行截图
### sy358: 受到祝福的平方
dfs, dp, https://sunnywhy.com/sfbj/8/3/539
思路：
代码：
```
n=input()
def is_square(a):
    if a<=0:
        return False
    return int(a**0.5)**2==a

dp=[True]+[False]*len(n)

for i in range(1,len(n)+1):
    for j in range(i):
        if is_square(int(n[j:i])) and dp[j]:
            dp[i]=True
if dp[-1]>0:
    print("Yes")
else:
    print("No")

```
代码运行截图 
## 2. 学习总结和收获
dp, dfs回溯和stack写法, bfs双端队列的各种模板开始熟悉了，但具体到题目该写什么还有点迷惑，LeeCode写法好怪，不太用得惯，细节上还是要看题解
