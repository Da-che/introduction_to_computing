Assignment #8: 田忌赛马来了
Updated 1021 GMT+8 Nov 12, 2024

2024 fall, Complied by 陈宣之 生命科学学院

说明：

1）请把每个题目解题思路（可选），源码Python, 或者C++（已经在Codeforces/Openjudge上AC），截图（包含Accepted），填写到下面作业模版中（推荐使用 typora https://typoraio.cn ，或者用word）。AC 或者没有AC，都请标上每个题目大致花费时间。

2）提交时候先提交pdf文件，再把md或者doc文件上传到右侧“作业评论”。Canvas需要有同学清晰头像、提交文件有pdf、"作业评论"区有上传的md或者doc附件。

3）如果不能在截止前提交作业，请写明原因。

1. 题目
12558: 岛屿周⻓
matices, http://cs101.openjudge.cn/practice/12558/

思路：
给矩阵加上保护圈，预存四个方向，遍历矩阵上为1的点，处理过的点设为-1跳过，该点周边（遍历四个方向）的点（判断在矩阵范围内）为0时，周长加一，为1时递推

代码：
n,m=map(int,input().split())
the_map=[[0]*(m+2)]for _ in range(n):
    the_map.append([0]+list(map(int,input().split()))+[0])
the_map.append([0]*(m+2))

direction=[(-1,0),(0,-1),(1,0),(0,1)]
count=0
def dfs(x,y):
    global count
    the_map[x][y]=-1
    for a,b in direction:
        nx,ny=x+a,y+b
        if 0<=nx<=n+1 and 0<=ny<=m+1:
            if the_map[nx][ny]==-1:
                continue
            elif the_map[nx][ny]==0:
                count+=1
            else:
                dfs(nx,ny)

for i in range(1,n+1):
    for j in range(1,m+1):
        if the_map[i][j]==1:
            dfs(i,j)
print(count)


代码运行截图 （至少包含有"Accepted"）


LeetCode54.螺旋矩阵
matrice, https://leetcode.cn/problems/spiral-matrix/

与OJ这个题目一样的 18106: 螺旋矩阵，http://cs101.openjudge.cn/practice/18106

思路：
初始化带有1保护圈的0矩阵，从（1,1）开始坐标改变方向在碰到不为0数时按顺时针顺序旋转

代码：
n=int(input())
matrix=[[1]*(n+2)]for i in range(n):
    matrix.append([1]+[0]*n+[1])
matrix.append([1]*(n+2))

directions=[(0,1),(1,0),(0,-1),(-1,0)]
x,y=1,1
direction=0for i in range(1,n*n+1):
    matrix[x][y]=i
    a,b=directions[direction]
    if matrix[x+a][y+b]:
        direction+=1
        direction%=4
        a,b=directions[direction]
    x,y=x+a,y+b

for i in range(1,n+1):
    print(" ".join(map(str,matrix[i][1:n+1])))


代码运行截图 ==（至少包含有"Accepted"）==


04133:垃圾炸弹
matrices, http://cs101.openjudge.cn/practice/04133/

思路：

代码：
d=int(input())
n=int(input())
rubbish=[]
max_cleaned=0
count=0for i in range(n):
    rubbish.append(list(map(int,input().split())))for i in range(1025):
    for j in range(1025):
        temp=0
        for k in range(n):
            if abs(rubbish[k][0]-i)<=d and abs(rubbish[k][1]-j)<=d:
                temp+=rubbish[k][2]
        if temp>max_cleaned:
            max_cleaned=temp
            count=1
        elif temp==max_cleaned:
            count+=1print(count,max_cleaned)

代码运行截图 （至少包含有"Accepted"）

LeetCode376.摆动序列
greedy, dp, https://leetcode.cn/problems/wiggle-subsequence/

与OJ这个题目一样的，26976:摆动序列, http://cs101.openjudge.cn/routine/26976/

思路：
先合并连续的相同数，处理后长度为1即输出1，大于一从第二个数开始建立二维dp数组，分别存储到该位为止的最大摆动序列及该序列最后一位是上升还是下降，每一位遍历前所有位，若与该位满足摆动要求，则取该位长度加一和自身最大长度的大值

代码：
n=int(input())
arr=list(map(int,input().split()))

scan=1while scan<len(arr):
    if arr[scan]==arr[scan-1]:
        arr.pop(scan)
    else:
        scan+=1
if len(arr)==1:
    print(1)else:
    dp=[[0,0],[2,arr[1]-arr[0]]]
    for _ in range(len(arr)-2):
        dp.append([2,arr[_+2]-arr[0]])
    for i in range(2,len(arr)):
        for j in range(1,i):
            if dp[j][1]*(arr[i]-arr[j])<0:
                if dp[i][0]<dp[j][0]+1:
                    dp[i][0]=dp[j][0]+1
                    dp[i][1]=(arr[i]-arr[j])

    print(dp[-1][0])

代码运行截图 （至少包含有"Accepted"）


CF455A: Boredom
dp, 1500, https://codeforces.com/contest/455/problem/A

思路：
先将数组排序，转为[数值,个数]的形式，并按照相邻数值差距不大于1拆分成不同组，每组内分别进行计算，建立二维dp数组，第一维为选择该数的最大和，是前一位第一维的值和第二维的值加上自己值的较大值，第二位为不选择该数的最大和，是前一位两维中较大值

代码：
n=int(input())
arr=list(map(int,input().split()))
arr.sort()
arr_split=[[[arr[0],1]]]
scan=1
while scan<n:
    if arr[scan]==arr_split[-1][-1][0]:
        arr_split[-1][-1][1]+=1
    elif arr[scan]==arr_split[-1][-1][0]+1:
        arr_split[-1].append([arr[scan],1])
    else:
        arr_split.append([[arr[scan],1]])
    scan+=1
 
ans=0
for i in range(len(arr_split)):
    dp=[[0,0] for j in range(len(arr_split[i]))]
    dp[0][0]=arr_split[i][0][1]*(arr_split[i][0][0])
    for j in range(1,len(arr_split[i])):
        dp[j][0]=max(dp[j-1][0],dp[j-1][1]+arr_split[i][j][0]*arr_split[i][j][1])
        dp[j][1]=max(dp[j-1][1],dp[j-1][0])
    ans+=max(dp[-1])
print(ans)
代码运行截图 （至少包含有"Accepted"）


02287: Tian Ji -- The Horse Racing
greedy, dfs http://cs101.openjudge.cn/practice/02287

思路：
排序之后，先从最快开始，如果田忌更快，则用双方最快马比，田忌赢；如果齐王更快，则用田忌最次马和齐王最快马比，齐王赢，但整体实力减少多于田忌。
如果双方相等，再从最慢的看，让田忌可能赢的先赢，找到赢不了的第一匹马，与齐王最快的马比，齐王赢或平局（也有可能）

代码：
while True:
    n=int(input())
    if n==0:
        break
    tian=list(map(int,input().split()))
    king=list(map(int,input().split()))
    tian.sort()
    king.sort()
    win=0
    for i in range(n):
        if tian[-1]>king[-1]:
            tian.pop()
            king.pop()
            win+=1
        elif tian[-1]<king[-1]:
            king.pop()
            tian.pop(0)
            win-=1
        else:
            if tian[0]>king[0]:
                tian.pop(0)
                king.pop(0)
                win+=1
            else:
                if tian[0]<king[-1]:
                    win-=1
                tian.pop(0)
                king.pop()
    print(win*200)

代码运行截图 （至少包含有"Accepted"）

2. 学习总结和收获
岛屿周长，摆动序列，boredom这类模版题变型题目能自行写出来了，开心！矩阵题目还比较简单，能明显感觉到自己的进步。但是田忌赛马看起来挺简单，平局情况还挺烧脑的，说实话感觉还是没太完全理解是怎么做出来的（awa）。还在追每日一练，加油！
